---
import Base from "@/layouts/Base.astro";
import { Clients } from "../../components/Clients";
import { ServicesBanner } from "@/layouts/components/services/ServicesBanner";
import { ServicesFeatures } from "@/layouts/components/services/ServicesFeatures";
import { ServicesServices } from "@/layouts/components/services/ServicesServices";
import { ServicesBenefits } from "@/layouts/components/services/ServicesBenefits";
import { ServicesProcess } from "@/layouts/components/services/ServicesProcess";
import { ServicesIndustries } from "@/layouts/components/services/ServicesIndustries";
import ConsultationCTA from "../../components/ConsultationCTA";
import NewFAQ from "../../components/NewFAQ";
import { sanityClient } from "sanity:client";
import DynamicCTA from "../../components/DynamicCTA";

interface Service {
  id: string;
  title: string;
  metaTitle: string;
  metaDescription: string;
  image: string;
  banner: any;
  featuresSection: any;
  servicesSection: any;
  benefitsSection: any;
  processSection: any;
  industriesSection: any;
  faqSection: any;
  ctaSection: any;
}

// Get all service page data in a single query
export async function getStaticPaths() {
  const servicesQuery = `
    *[_type == "dynamicServicePage"] {
      "id": slug.current,
      title,
      metaTitle,
      metaDescription,
      banner {
        title,
        description,
        buttons[] {
          label,
          link,
          isCalendly
        },
        image {
          "src": src.asset->url,
          alt
        },
        floatingElements[] {
          icon,
          title,
          value,
          color,
          position
        }
      },
      featuresSection {
        heading {
          tagline,
          title,
          description
        },
        features[] {
          title,
          tagline,
          description,
          icon,
          "imageUrl": image.asset->url
        }
      },
      servicesSection {
        heading {
          tagline,
          title,
          description
        },
        services[] {
          title,
          description,
          features
        }
      },
      benefitsSection {
        heading {
          tagline,
          title,
          description
        },
        benefits[] {
          title,
          description,
          icon
        }
      },
      processSection {
        heading {
          tagline,
          title,
          description
        },
        steps[] {
          title,
          description,
          "image": image.asset->url
        }
      },
      industriesSection {
        heading {
          tagline,
          title,
          description
        },
        industries[] {
          title,
          description,
          icon
        }
      },
      faqSection {
        title,
        pageTitle,
        subtitle,
        description,
        list[] {
          title,
          description,
          active
        }
      },
      ctaSection {
        tagline,
        title,
        subtitle,
        description,
        metrices[] {
          value,
          label,
          icon
        },
        buttonText,
        image {
          "src": src.asset->url,
          alt
        }
      }
    }
  `;
  
  try {
    const services = await sanityClient.fetch(servicesQuery);
    
    return services.map((service: {id: string}) => {
      return {
        params: { id: service.id },
        props: { service },
      };
    });
  } catch (error) {
    console.error("Error fetching services:", error);
    return [];
  }
}

// Add type annotation to props destructuring
const { service } = Astro.props as { service: Service };

if (!service) {
  return Astro.redirect('/404');
}
---

<Base
  title={service.title}
  meta_title={service.metaTitle}
  description={service.metaDescription}
  image={service.image}
>
  <ServicesBanner client:load content={service.banner} />
  <Clients client:load />
  <ServicesFeatures 
    client:load 
    features={service.featuresSection.features} 
    heading={service.featuresSection.heading}
  />
  <ServicesServices 
    client:load 
    services={service.servicesSection.services} 
    heading={service.servicesSection.heading}
  />
  <ServicesBenefits 
    client:load 
    benefits={service.benefitsSection.benefits} 
    heading={service.benefitsSection.heading}
  />
  <ServicesProcess 
    client:load 
    process={service.processSection.steps} 
    heading={service.processSection.heading}
  />
  <ServicesIndustries 
    client:load 
    industries={service.industriesSection.industries} 
    heading={service.industriesSection.heading}
  />
  <DynamicCTA client:load ctaContent={service.ctaSection} />
  <NewFAQ client:load Faq={[service.faqSection]} />
</Base>
