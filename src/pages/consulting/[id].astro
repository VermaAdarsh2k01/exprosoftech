---
import Base from "../../layouts/Base.astro";
import { Clients } from "../../components/Clients";
import  DemandDrivenBanner  from "../../components/DemandDrivenBanner";
import  DemandDrivenImpact from "../../components/DemandDrivenImpact";
import  ChallengesWeAddress from "../../components/ChallengesWeAddress";
import  KeyServices  from "../../components/KeyServices";
import  BusinessGuidance  from "../../components/BusinessGuidance";
import ConsultationCTA from "../../components/ConsultationCTA";
import NewFAQ from "../../components/NewFAQ";
import { sanityClient } from "sanity:client";
import { DynamicCTA } from "../../components/DynamicCTA";

interface ConsultingPage {
  id: string;
  title: string;
  metaTitle: string;
  metaDescription: string;
  banner: any;
  impact: any;
  challenges: any;
  keyServices: any;
  businessGuidance: any;
  faq: any;
  ctaSection: any;
}

export async function getStaticPaths() {
  const consultingQuery = `
    *[_type == "dynamicConsultingsPage"] {
      "id": slug.current,
      title,
      metaTitle,
      metaDescription,
      banner {
        title,
        subtitle,
        description,
        image[] {
          "src": src.asset->url,
          alt
        },
        buttons[] {
          label,
          link,
          isCalendly
        }
      },
      impact {
        title,
        imageOverlayTitle,
        imageOverlayDescription,
        image {
          "src": src.asset->url,
          alt
        },
        stats[] {
          value,
          label,
          description
        }
      },
      challenges {
        title,
        subtitle,
        description,
        challengesList[] {
          title,
          description,
          "icon": icon.asset->url
        }
      },
      keyServices {
        title,
        subtitle,
        description,
        services[] {
          id,
          title,
          icon,
          points,
          metrics {
            value,
            label,
            trend
          },
          highlights[] {
            icon,
            value,
            label
          }
        }
      },
      businessGuidance {
        title,
        subtitle,
        description,
        "image": {
          "src": image.asset->url,
          "alt": image.alt
        },
        guidancePoints[] {
          id,
          title,
          description
        },
        empowerment {
          title,
          subtitle,
          description,
          points[] {
            icon,
            title,
            description
          },
          image {
            "src": image.asset->url,
            "alt": image.alt
          }
        }
      },
      faq {
        title,
        subtitle,
        description,
        list[] {
          title,
          description,
          active
        }
      },
      ctaSection {
        tagline,
        title,
        subtitle,
        description,
        metrices[] {
          value,
          label,
          icon
        },
        buttonText,
        image {
          "src": src.asset->url,
          alt
        }
      }
    }
  `;
  
  try {
    const pages = await sanityClient.fetch(consultingQuery);
    
    if (!pages || !Array.isArray(pages)) {
      console.error("No pages found or invalid response");
      return [];
    }

    return pages.map((page: {id: string}) => {
      return {
        params: { id: page.id },
        props: { page },
      };
    });
  } catch (error) {
    console.error("Error fetching consulting pages:", error);
    return [];
  }
}

// Add type annotation to props destructuring
const { page } = Astro.props as { page: ConsultingPage };

if (!page) {
  return Astro.redirect('/404');
}
---

<Base
  title={page.title}
  meta_title={page.metaTitle}
  description={page.metaDescription}
>
  <DemandDrivenBanner client:load content={page.banner} />
  <Clients client:load />
  <DemandDrivenImpact client:load content={page.impact} />
  <ChallengesWeAddress client:load content={page.challenges} />
  <KeyServices 
    client:load 
    heading={{
      title: page.keyServices.title,
      subtitle: page.keyServices.subtitle,
      description: page.keyServices.description
    }}
    keyServicesData={page.keyServices.services || []} 
  />
  <BusinessGuidance 
    client:load 
    businessGuidanceData={page.businessGuidance}
    empowermentData={page.businessGuidance.empowerment}
  />
  <DynamicCTA client:load ctaContent={page.ctaSection} />
  <NewFAQ client:load Faq={[page.faq]} />
</Base>