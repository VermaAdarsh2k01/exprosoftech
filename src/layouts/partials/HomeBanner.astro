---
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button } from "@/types";
import { getEntry } from "astro:content";

interface Banner {
  title: string;
  description: string;
  bg_images: string;
  images: {
    src: string;
    alt: string;
  }[];
  buttons: Button[];
}

const { title, description, buttons, images }: Banner = (
  await getEntry("sections", "home-banner")
).data;
---

<style>
  .gradient-text {
    @apply bg-gradient-to-r from-[#111b57] to-primary bg-clip-text text-transparent font-medium;
  }
</style>

{
  (
    <section class="pt-8 pb-16 lg:pt-12 lg:pb-24">
      <div class="max-w-[85rem] mx-auto px-3 ">
        <div class="row items-center justify-between">
          {/* Left Column - Content */}
          <div class="mb-8 lg:mb-0 text-center lg:text-left lg:col-6">
            {title && (
              <h1
                set:html={markdownify(title)}
                data-aos="fade-up-sm"
                class="mb-4 text-h3 lg:text-h1 gradient-text"
              />
            )}
            {description && (
              <p
                set:html={markdownify(description)}
                data-aos="fade-up-sm"
                class="mb-8 text-lg/[inherit]"
              />
            )}
            {buttons && (
              <ul class="flex flex-wrap lg:justify-start justify-center gap-4">
              {buttons.map(({ label, link }, index) => (
                  <li data-aos="fade-up-sm" data-aos-delay={100 + index * 50}>
                    <a
                      class={`${index === 0 ? "btn-primary" : "btn-outline-primary"} btn`}
                      href={link}
                      target={link.startsWith("http") ? "_blank" : "_self"}
                      rel="noopener"
                    >
                      {label}
                      <span class="sr-only">Details</span>
                      <DynamicIcon
                        icon={
                          label === "Download Deck"
                            ? "FaDownload"
                            : "FaArrowRight"
                        }
                      />
                      {/* <span class="icon-wrapper">
                        <span class="icon">
                          <DynamicIcon
                            icon={
                              label === "Download Deck"
                                ? "FaDownload"
                                : "FaArrowRight"
                            }
                          />
                        </span>
                      </span> */}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Right Column - Image */}
          {images && images[0] && (
            <div class="lg:col-6">
              <div class="relative" data-aos="fade-up-sm" data-aos-delay="400">
                <ImageMod
                  src={images[0].src}
                  alt={images[0].alt}
                  width={580}
                  height={480}
                  class="w-full h-auto rounded-lg object-cover p-4"
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  )
}
