---
import ImageMod from "@/components/ImageMod.astro";
import SectionHeader from "./SectionHeader.astro";
import { markdownify } from "@/lib/utils/textConverter";

const features = [
  {
    number: "01",
    title: "Loyalty Management",
    subheading: "Product-Focused Customer Loyalty Solutions",
    description:
      "Transform your customer relationships with our comprehensive loyalty management platform. We help businesses design, implement, and optimize reward programs that drive engagement, increase retention, and maximize customer lifetime value through data-driven personalization.",
    image: "/images/leftImgOne.png",
  },
  {
    number: "02",
    title: "Channel Reach Expansion",
    subheading: "Strategic Market Presence Enhancement",
    description:
      "Expand your market presence through strategic channel partnerships and distribution networks. Our approach focuses on identifying and developing optimal channel mix, enabling businesses to reach new markets and customer segments effectively.",
    image: "/images/leftImgTwo.jpg",
  },
  {
    number: "03",
    title: "B2B Sales Excellence",
    subheading: "End-to-End B2B Sales Pipeline Management",
    description:
      "Accelerate your B2B sales with our comprehensive approach covering prospecting, content creation, multi-channel outreach (LinkedIn & Email), appointment scheduling, and complete funnel management. We help you build and maintain a robust sales pipeline that delivers consistent results.",
    image: "/images/leftImgThree.jpg",
  },
];

const sectionHeader = {
  tagline: "Comprehensive Business Solutions",
  heading: "Driving Growth Through Strategic Excellence",
  subheading:
    "We deliver targeted solutions across loyalty management, channel expansion, and B2B sales to help businesses achieve sustainable growth and market leadership. Our integrated approach ensures measurable results and long-term success.",
};
---

<section class="py-24 bg-gradient-to-b from-white to-gray-50">
  <div class="container max-w-7xl mx-auto px-4">
    <SectionHeader
      tagline={sectionHeader.tagline}
      heading={sectionHeader.heading}
      subheading={sectionHeader.subheading}
    />

    <div class="mt-24 lg:flex gap-20" id="features-container">
      <!-- Sticky Image Container -->
      <div class="hidden lg:block lg:w-1/2">
        <div class="sticky top-32 p-6">
          <div class="relative aspect-square overflow-hidden rounded-2xl shadow-2xl transform hover:scale-[1.02] transition-transform duration-500">
            {
              features.map((feature, index) => (
                <div
                  class="feature-image absolute inset-0 w-full h-full"
                  data-index={index}
                >
                  <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent z-10" />
                  <ImageMod
                    src={feature.image}
                    alt={`Feature ${index + 1}`}
                    class="h-full w-full object-cover transform scale-105 transition-transform duration-700"
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Scrollable Content Container -->
      <div class="lg:w-1/2 relative" id="scroll-content">
        <div
          class="absolute left-0 top-0 h-full w-[3px] bg-gradient-to-b from-gray-100 to-gray-200 rounded-full"
          id="progress-track"
        >
          <!-- Progress bar with enhanced gradient -->
          <div
            class="absolute top-0 w-full bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600 rounded-full shadow-lg"
            id="progress-bar"
          >
          </div>
        </div>

        {
          features.map((feature, index) => (
            <div
              class="feature-section mb-12 last:mb-0 p-8 pl-12 rounded-2xl min-h-[70vh] flex flex-col justify-start pt-[8vh] hover:bg-white/50 transition-colors duration-300"
              data-index={index}
            >
              <div class="space-y-10">
                <span class="text-[120px] font-light bg-gradient-to-r from-blue-600 to-blue-400 bg-clip-text text-transparent leading-none block mb-8 opacity-20">
                  {feature.number}
                </span>

                {/* Mobile Image */}
                <div class="lg:hidden rounded-2xl overflow-hidden mb-8 aspect-[4/3] shadow-xl">
                  <div class="relative">
                    <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent z-10" />
                    <ImageMod
                      src={feature.image}
                      alt={`Feature ${index + 1}`}
                      class="h-full w-full object-cover"
                    />
                  </div>
                </div>

                <div class="space-y-6">
                  <h3
                    class="text-4xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent"
                    set:html={markdownify(feature.title)}
                  />
                  <h4
                    class="text-xl text-gray-600 font-medium max-w-md"
                    set:html={markdownify(feature.subheading)}
                  />
                  <p
                    class="text-gray-600 max-w-md leading-relaxed mt-4 text-lg"
                    set:html={markdownify(feature.description)}
                  />
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  function handleScroll() {
    const container = document.getElementById("features-container");
    const scrollContent = document.getElementById("scroll-content");
    const progressBar = document.getElementById("progress-bar");
    const sections = document.querySelectorAll(".feature-section");
    const images = document.querySelectorAll(".feature-image");

    if (!container || !scrollContent || !progressBar) return;

    // Calculate scroll progress with offset
    const containerRect = container.getBoundingClientRect();
    const scrollRect = scrollContent.getBoundingClientRect();

    // Adjust the starting point to be when the first section enters viewport
    const startOffset = window.innerHeight * 0.2; // 20% of viewport height
    const scrollableDistance =
      scrollRect.height - window.innerHeight + startOffset;

    const progress = Math.max(
      0,
      Math.min(1, (-containerRect.top + startOffset) / scrollableDistance)
    );

    // Update progress bar height
    progressBar.style.height = `${progress * 100}%`;

    // Handle feature sections visibility
    sections.forEach((section) => {
      const rect = section.getBoundingClientRect();
      const index = parseInt(section.getAttribute("data-index") || "0");
      const correspondingImage = document.querySelector(
        `.feature-image[data-index="${index}"]`
      );

      // Calculate how much of the section is visible
      const sectionHeight = (section as HTMLElement).offsetHeight;
      const visibleHeight =
        Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
      const visibilityRatio = Math.max(
        0,
        Math.min(1, visibleHeight / sectionHeight)
      );

      if (correspondingImage) {
        // Show image when its section is more than 50% visible
        if (visibilityRatio > 0.5) {
          (correspondingImage as HTMLElement).style.opacity = "1";
        } else {
          (correspondingImage as HTMLElement).style.opacity = "0";
        }

        // Higher index = higher z-index for proper stacking
        (correspondingImage as HTMLElement).style.zIndex = index.toString();
      }
    });
  }

  window.addEventListener("scroll", handleScroll);
  handleScroll();
</script>

<style>
  .feature-section {
    background-color: transparent;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .feature-image {
    opacity: 0;
    transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .feature-image[data-index="0"] {
    opacity: 1;
  }

  @media (max-width: 1024px) {
    .feature-section {
      min-height: auto;
      padding-top: 2rem;
    }
  }

  #progress-track {
    mask-image: linear-gradient(
      to bottom,
      transparent 0%,
      black 5%,
      black 95%,
      transparent 100%
    );
  }

  #progress-bar {
    transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }

  .feature-section:hover .text-[120px] {
    opacity: 0.3;
    transform: scale(1.05);
    transition: all 0.5s ease;
  }
</style>
