---
import ImageMod from "@/components/ImageMod.astro";
import SectionHeader from "./SectionHeader.astro";
import { markdownify } from "@/lib/utils/textConverter";

const features = [
  {
    number: "01",
    title: "Customer Loyalty",
    subheading: "Empowering Global Brands with Next-Gen Loyalty Solutions",
    description:
      "Seamlessly integrating personalized experiences, real-time  data analytics, and customer engagement strategies to drive sustainable growth and build lasting relationships worldwide.",
    image: "/images/leftImgOne.png",
  },
  {
    number: "02",
    title: "Inside Sales Solutions",
    subheading: "Driving Business Growth with Targeted Engagement",
    description:
      "Inside Sales is your gateway to unlocking global reach and driving sales efficiency. Our approach focuses on quality prospecting of decision-makers, ensuring that every interaction is impactful and results-driven.",
    image: "/images/leftImgTwo.jpg",
  },
  {
    number: "03",
    title: "Go-To-Market Strategy",
    subheading: "Empowering Global Brands with Next-Gen Loyalty Solutions",
    description:
      "Achieve peak performance through our operational excellence programs. We streamline workflows, reduce inefficiencies, and implement best practices to maximize your organizational productivity.",
    image: "/images/leftImgThree.jpg",
  },
];

const sectionHeader = {
  tagline: "Strategic Solutions for Sustainable Growth",
  heading: "Expert Guidance for Business Transformation",
  subheading:
    "Our consultancy offers expert insights and tailored strategies to overcome challenges, optimize operations, and drive growth. We deliver actionable solutions that turn your vision into reality, ensuring long-term success and scalability.",
};
---

<section class="py-16">
  <div class="container max-w-7xl mx-auto">
    <SectionHeader
      tagline={sectionHeader.tagline}
      heading={sectionHeader.heading}
      subheading={sectionHeader.subheading}
    />

    <div class="mt-16 lg:flex gap-16" id="features-container">
      <!-- Sticky Image Container -->
      <div class="hidden lg:block lg:w-1/2">
        <div class="sticky top-32 p-6">
          <div class="relative aspect-square overflow-hidden rounded-xl">
            {
              features.map((feature, index) => (
                <div
                  class="feature-image absolute inset-0 w-full h-full"
                  data-index={index}
                >
                  <ImageMod
                    src={feature.image}
                    alt={`Feature ${index + 1}`}
                    class="h-full w-full object-cover"
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Scrollable Content Container -->
      <div class="lg:w-1/2 relative" id="scroll-content">
        <div
          class="absolute left-0 top-0 h-full w-[3px] bg-neutral-100 rounded-full"
          id="progress-track"
        >
          <!-- Progress bar with gradient -->
          <div
            class="absolute top-0 w-full bg-gradient-to-b from-[#336AEA40] via-[#336AEA80] to-[#336AEA] rounded-full"
            id="progress-bar"
          >
          </div>
        </div>

        {
          features.map((feature, index) => (
            <div
              class="feature-section mb-8 last:mb-0 p-6 pl-8 rounded-xl min-h-[60vh] flex flex-col justify-start pt-[5vh]"
              data-index={index}
            >
              <div class="space-y-8">
                <span class="text-[80px] font-light text-gray-200 leading-none block mb-6">
                  {feature.number}
                </span>

                {/* Mobile Image */}
                <div class="lg:hidden rounded-xl overflow-hidden mb-6 aspect-[4/3]">
                  <ImageMod
                    src={feature.image}
                    alt={`Feature ${index + 1}`}
                    class="h-full w-full object-cover"
                  />
                </div>

                <div class="space-y-4">
                  <h3
                    class="text-4xl font-bold"
                    set:html={markdownify(feature.title)}
                  />
                  <h4
                    class="text-xl text-gray-600 font-medium max-w-md"
                    set:html={markdownify(feature.subheading)}
                  />
                  <p
                    class="text-gray-600 max-w-md leading-relaxed mt-4"
                    set:html={markdownify(feature.description)}
                  />
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  function handleScroll() {
    const container = document.getElementById("features-container");
    const scrollContent = document.getElementById("scroll-content");
    const progressBar = document.getElementById("progress-bar");
    const sections = document.querySelectorAll(".feature-section");
    const images = document.querySelectorAll(".feature-image");

    if (!container || !scrollContent || !progressBar) return;

    // Calculate scroll progress with offset
    const containerRect = container.getBoundingClientRect();
    const scrollRect = scrollContent.getBoundingClientRect();

    // Adjust the starting point to be when the first section enters viewport
    const startOffset = window.innerHeight * 0.2; // 20% of viewport height
    const scrollableDistance =
      scrollRect.height - window.innerHeight + startOffset;

    const progress = Math.max(
      0,
      Math.min(1, (-containerRect.top + startOffset) / scrollableDistance)
    );

    // Update progress bar height
    progressBar.style.height = `${progress * 100}%`;

    // Handle feature sections visibility
    sections.forEach((section) => {
      const rect = section.getBoundingClientRect();
      const index = parseInt(section.getAttribute("data-index") || "0");
      const correspondingImage = document.querySelector(
        `.feature-image[data-index="${index}"]`
      );

      // Calculate how much of the section is visible
      const sectionHeight = (section as HTMLElement).offsetHeight;
      const visibleHeight =
        Math.min(rect.bottom, window.innerHeight) - Math.max(rect.top, 0);
      const visibilityRatio = Math.max(
        0,
        Math.min(1, visibleHeight / sectionHeight)
      );

      if (correspondingImage) {
        // Show image when its section is more than 50% visible
        if (visibilityRatio > 0.5) {
          (correspondingImage as HTMLElement).style.opacity = "1";
        } else {
          (correspondingImage as HTMLElement).style.opacity = "0";
        }

        // Higher index = higher z-index for proper stacking
        (correspondingImage as HTMLElement).style.zIndex = index.toString();
      }
    });
  }

  window.addEventListener("scroll", handleScroll);
  handleScroll();
</script>

<style>
  .feature-section {
    background-color: transparent;
    transition: all 0.3s ease;
  }

  .feature-image {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .feature-image[data-index="0"] {
    opacity: 1;
  }

  /* Add smooth transition for mobile images */
  @media (max-width: 1024px) {
    .feature-section {
      min-height: auto;
      padding-top: 2rem;
    }
  }

  #progress-track {
    mask-image: linear-gradient(
      to bottom,
      transparent 0%,
      black 5%,
      black 100%
    );
  }

  #progress-bar {
    transition: height 0.3s ease;
  }
</style>
