---
import { humanize } from "@/lib/utils/textConverter";

interface BreadcrumbItem {
  label: string;
  href: string;
}

const { className, customBreadcrumbs }: { 
  className?: string; 
  customBreadcrumbs?: BreadcrumbItem[];
} = Astro.props;

// Get the current pathname and split it into segments
const currentPath = Astro.url.pathname;

let parts;

if (customBreadcrumbs) {
  // Use custom breadcrumbs if provided
  parts = [
    {
      label: "Home",
      href: "/",
      "aria-label": currentPath === "/" ? "page" : undefined,
    },
    ...customBreadcrumbs.map((crumb, index) => ({
      label: crumb.label,
      href: crumb.href,
      "aria-label": currentPath === crumb.href ? "page" : undefined,
    }))
  ];
} else {
  // Auto-generate breadcrumbs from URL
  const paths = currentPath.split("/").filter((x: string) => x && x.length > 0);
  
  // Start with Home
  parts = [
    {
      label: "Home",
      href: "/",
      "aria-label": currentPath === "/" ? "page" : undefined,
    },
  ];

  // Build breadcrumb parts from URL segments
  paths.forEach((segment: string, i: number) => {
    const href = `/${paths.slice(0, i + 1).join("/")}/`;
    
    // Skip pagination and filter out unwanted segments
    if (segment !== "page" && segment !== "index") {
      const label = humanize(segment.replace(".html", "").replace(/[-_]/g, " "));
      
      parts.push({
        label: label || segment,
        href,
        "aria-label": currentPath === href ? "page" : undefined,
      });
    }
  });
}
---

<nav aria-label="Breadcrumb" class={className}>
  <ol class="inline-flex" role="list">
    {
      parts.map(({ label, ...attrs }, index) => (
        <li class="mx-1 capitalize" role="listitem">
          {index > 0 && <span class="inline-block mr-1 text-dark">/</span>}
          {index !== parts.length - 1 ? (
            <a class="text-primary hover:text-primary/80 transition-colors" {...attrs}>
              {label}
            </a>
          ) : (
            <span class="text-dark font-medium">{label}</span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
