---
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";

const features = [
  {
    tagline: "Flexible Production for a Dynamic Market",
    title: "Agile Manufacturing Solutions",
    description: "Streamline material, manpower, and machinery to efficiently meet shifting market demands. Our adaptable processes ensure production aligns with changing needs, maximizing resource use and supporting sales with agility..",
    image: "/images/FeatureImgOne.png"
  },
  {
    tagline: "Empowering Sales to Meet Market Needs",
    title: "Market Aligned Sales Process",
    description: "Align your sales strategies with actual market demand to ensure seamless channel sales transformation. By synchronizing your sales process with market needs, we help you drive efficiency, better customer engagement, and growth in target markets.",
    image: "/images/FeatureImgTwo.png"
  },
  {
    tagline: "Empowering Businesses with Data-Driven Insights",
    title: "Real-Time IT Solutions",
    description: "Our consultancy provides cutting-edge IT infrastructure combined with advanced data analytics to ensure seamless real-time monitoring and execution. We design and implement robust systems that allow you to stay ahead in today's fast-paced environment.",
    image: "/images/FeatureImgThree.png"
  },
  {
    tagline: "Skilled Teams, Smart Systems, Superior Results",
    title: "People & Systems",
    description: "Our consultancy optimizes your workforce and technology to drive performance. By building skilled teams and implementing advanced systems, we streamline operations, boost productivity, and ensure sustainable growth, enabling your business to adapt and excel in dynamic markets.",
    image: "/images/FeatureImgFour.png"
  }
];
---

<div class="sticky-container relative flex gap-8 lg:gap-16  max-w-[1320px] mx-auto px-4 lg:px-8">
  <!-- Vertical Navigation -->
  <div class="hidden lg:block sticky h-fit top-0 w-[300px] pt-[150px]">
    <nav class="vertical-nav space-y-10 pl-8 border-l border-gray-200">
      {features.map((item, index) => (
        <button
          class="nav-item text-left transition-all duration-300 hover:text-primary pl-6 -ml-[1px] relative group"
          data-target={`feature-${index}`}
        >
          <span class="block text-sm text-gray-400 mb-3">{item.tagline}</span>
          <span class="font-medium text-lg block leading-snug">{item.title}</span>
          <span class="absolute left-0 top-0 h-full w-[2px] bg-primary opacity-0 transition-opacity duration-300 nav-indicator"></span>
        </button>
      ))}
    </nav>
  </div>

  <!-- Features Content -->
  <div class="sticky-features mt-10 flex-1 space-y-32">
    {features.map((item, mindex) => {
      const { tagline, title, description, image } = item;
      return (
        <div
          id={`feature-${mindex}`}
          class="overflow-hidden rounded-3xl lg:sticky lg:top-[120px] h-fit lg:h-[500px]"
          style="background-color: #1E293B;"
        >
          <div class="flex flex-col lg:flex-row justify-between h-full">
            {/* Left Content Side */}
            <div class="lg:w-1/2" data-aos="fade-up-sm">
              <div class="p-6 md:p-14 lg:p-16 xl:p-10 flex flex-col justify-center">
                {tagline && (
                  <p 
                    class="text-sm uppercase tracking-wider !text-white mb-8"
                    data-aos="fade-up-sm"
                  >
                    {tagline}
                  </p>
                )}
                {title && (
                  <h2
                    class="text-2xl lg:text-3xl xl:text-4xl mb-8 !text-white leading-tight font-semibold"
                    data-aos="fade-up-sm"
                    set:html={markdownify(title)}
                  />
                )}
                {description && (
                  <p
                    class="text-xs lg:text-lg !text-gray-300 leading-relaxed"
                    data-aos="fade-up-sm"
                    data-aos-delay="100"
                    set:html={markdownify(description)}
                  />
                )}
              </div>
            </div>

            {/* Right Image Side */}
            <div class="lg:w-1/2 h-full">
              <div class="p-6 md:p-8 lg:p-10 xl:p-12 h-full flex items-end lg:items-center justify-center">
                {image && (
                  <ImageMod
                    src={image}
                    alt={title}
                    class="w-full h-fit max-w-[400px] lg:max-w-[520px] rounded-lg object-cover"
                    data-aos="fade-up-sm"
                    data-aos-delay="200"
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      );
    })}
  </div>
</div>

<style>
  .sticky-features {
    min-height: 150vh;
    @media (min-width: 1024px) {
      min-height: 250vh;
    }
  }

  .nav-item {
    @apply opacity-60 transition-all duration-300;
  }

  /* Updated active state styles */
  .nav-item.active {
    @apply opacity-100 text-primary !important;
  }

  .nav-item.active .nav-indicator {
    @apply opacity-100;
  }

  /* Updated hover styles to not override active state */
  .nav-item:hover:not(.active) {
    @apply opacity-100 text-primary;
  }

  /* Add subtle transition for nav items */
  .vertical-nav button {
    @apply transform transition-transform duration-300;
  }

  .vertical-nav button:hover {
    @apply translate-x-1;
  }

  /* Remove the border-left from active state since we're using the indicator */
  .nav-item.active {
    @apply -ml-[1px];
  }
</style>

<script>
  // Handle navigation click and scroll
  const navItems = document.querySelectorAll('.nav-item');
  const features = document.querySelectorAll('.sticky-features > div');

  // Update active state based on scroll position
  const updateActiveState = () => {
    const scrollPosition = window.scrollY + window.innerHeight / 2;
    let activeFound = false;
    
    features.forEach((feature, index) => {
      const featureTop = (feature as HTMLElement).offsetTop;
      const featureBottom = featureTop + (feature as HTMLElement).offsetHeight;
      
      if (scrollPosition >= featureTop && scrollPosition < featureBottom) {
        navItems.forEach(item => {
          item.classList.remove('active');
          (item as HTMLElement).style.removeProperty('color');
        });
        navItems[index].classList.add('active');
        activeFound = true;
      }
    });

    if (!activeFound && window.scrollY < (features[0] as HTMLElement).offsetTop) {
      navItems.forEach(item => {
        item.classList.remove('active');
        (item as HTMLElement).style.removeProperty('color');
      });
      navItems[0].classList.add('active');
    }
  };

  // Updated click handler
  navItems.forEach((item: Element) => {
    item.addEventListener('click', (e) => {
      // Remove active class from all items
      navItems.forEach(nav => {
        nav.classList.remove('active');
        (nav as HTMLElement).style.removeProperty('color');
      });
      
      // Add active class to clicked item
      item.classList.add('active');
      
      const targetId = (item as HTMLElement).dataset.target;
      if (targetId) {
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({ 
            behavior: 'smooth',
            block: 'center'
          });
        }
      }
    });
  });

  // Update active state on scroll
  window.addEventListener('scroll', updateActiveState);
  
  // Initial state update
  window.addEventListener('load', updateActiveState);
  updateActiveState();
</script>