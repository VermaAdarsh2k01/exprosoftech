---
import ImageMod from "@/components/ImageMod.astro";

const features = [
  {
    tagline: "Flexible Production for a Dynamic Market",
    title: "Agile Manufacturing Solutions",
    description:
      "Streamline material, manpower, and machinery to efficiently meet shifting market demands. Our adaptable processes ensure production aligns with changing needs, maximizing resource use and supporting sales with agility..",
    image: "/images/FeatureImgOne.png",
  },
  {
    tagline: "Empowering Sales to Meet Market Needs",
    title: "Market Aligned Sales Process",
    description:
      "Align your sales strategies with actual market demand to ensure seamless channel sales transformation. By synchronizing your sales process with market needs, we help you drive efficiency, better customer engagement, and growth in target markets.",
    image: "/images/FeatureImgTwo.png",
  },
  {
    tagline: "Empowering Businesses with Data-Driven Insights",
    title: "Real-Time IT Solutions",
    description:
      "Our consultancy provides cutting-edge IT infrastructure combined with advanced data analytics to ensure seamless real-time monitoring and execution. We design and implement robust systems that allow you to stay ahead in today's fast-paced environment.",
    image: "/images/FeatureImgThree.png",
  },
  {
    tagline: "Skilled Teams, Smart Systems, Superior Results",
    title: "People & Systems",
    description:
      "Our consultancy optimizes your workforce and technology to drive performance. By building skilled teams and implementing advanced systems, we streamline operations, boost productivity, and ensure sustainable growth, enabling your business to adapt and excel in dynamic markets.",
    image: "/images/FeatureImgFour.png",
  },
];
---

<section>
  <div class="container-xl mx-auto px-4">
    <div class="flex flex-col gap-8 lg:gap-12">
      {/* Navigation Tabs */}
      <nav class="grid grid-cols-2 sm:flex sm:flex-row flex-wrap justify-center gap-3 sm:gap-4">
        {
          features.map((feature, index) => (
            <button
              class:list={[
                "px-3 sm:px-6 py-2.5 sm:py-3 rounded-xl sm:rounded-2xl transition-all duration-300",
                "shadow-md hover:shadow-lg",
                "border border-white/10",
                "bg-white/5 text-slate-500 hover:bg-white/10 hover:-translate-y-0.5",
                "text-center",
                index === 0 && "active",
              ]}
              data-tab={`tab-${index}`}
            >
              <span class="font-medium text-[13px] sm:text-[15px] tracking-wide line-clamp-1">
                {feature.title}
              </span>
            </button>
          ))
        }
      </nav>

      {/* Feature Cards */}
      <div class="min-h-[550px] md:min-h-[700px] lg:min-h-[500px] relative">
        {
          features.map((feature, index) => (
            <div
              id={`tab-${index}`}
              class:list={[
                "feature-card absolute inset-0 w-full h-full transition-all duration-500",
                index === 0
                  ? "opacity-100 translate-y-0 z-10"
                  : "opacity-0 translate-y-8 pointer-events-none z-0",
              ]}
            >
              <div class="bg-slate-900 rounded-2xl sm:rounded-[3rem] overflow-hidden shadow-xl h-full border border-slate-800">
                <div class="grid grid-cols-1 lg:grid-cols-2 h-full">
                  {/* Content Side */}
                  <div class="order-2 lg:order-1 p-5 md:p-8 lg:p-12 flex flex-col justify-center">
                    <div class="space-y-3 md:space-y-4 lg:space-y-6">
                      <span class="inline-block bg-gradient-to-r from-primary/20 to-primary/10 text-white/90 px-3 py-1.5 rounded-full text-xs sm:text-sm font-medium border border-white/10 shadow-lg">
                        {feature.tagline}
                      </span>

                      <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-white leading-tight">
                        {feature.title}
                      </h2>

                      <p class="text-sm sm:text-base text-slate-300 leading-relaxed line-clamp-3 md:line-clamp-4 lg:line-clamp-none">
                        {feature.description}
                      </p>
                    </div>
                  </div>

                  {/* Image Side */}
                  <div class="order-1 lg:order-2 p-4 pb-0 md:p-6 lg:p-8 flex items-center justify-center">
                    <div class="relative w-full aspect-[4/3] max-w-[400px] md:max-w-[450px]">
                      <ImageMod
                        src={feature.image}
                        alt={feature.title}
                        class="w-full h-full object-contain"
                        width={600}
                        height={450}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  const init = (): void => {
    const tabs: NodeListOf<HTMLElement> =
      document.querySelectorAll("[data-tab]");
    const cards: NodeListOf<HTMLElement> =
      document.querySelectorAll(".feature-card");

    const switchTab = (tabId: string): void => {
      tabs.forEach((tab: HTMLElement) => {
        const isActive = tab.dataset.tab === tabId;

        // Toggle active state classes
        tab.classList.toggle("active", isActive);
        tab.classList.toggle("bg-gradient-to-r", isActive);
        tab.classList.toggle("from-blue-600", isActive);
        tab.classList.toggle("to-indigo-600", isActive);
        tab.classList.toggle("text-white", isActive);
        tab.classList.toggle("bg-white/5", !isActive);
        tab.classList.toggle("text-slate-500", !isActive);
      });

      // Toggle card visibility
      cards.forEach((card: HTMLElement) => {
        const isActive = card.id === tabId;
        card.classList.toggle("opacity-0", !isActive);
        card.classList.toggle("translate-y-8", !isActive);
        card.classList.toggle("pointer-events-none", !isActive);
        card.classList.toggle("z-0", !isActive);
        card.classList.toggle("opacity-100", isActive);
        card.classList.toggle("translate-y-0", isActive);
        card.classList.toggle("z-10", isActive);
      });
    };

    tabs.forEach((tab: HTMLElement) => {
      tab.addEventListener("click", () => {
        const tabId = tab.dataset.tab;
        if (tabId) switchTab(tabId);
      });
    });

    // Initialize first tab
    switchTab("tab-0");
  };

  document.addEventListener("DOMContentLoaded", init);
</script>
